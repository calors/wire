import org.gradle.plugins.ide.eclipse.model.SourceFolder

plugins {
    id 'com.google.protobuf' version '0.8.12'
    id 'eclipse'
    id 'java-library'
    id 'maven-publish'
    id 'signing'
}
apply from: 'resources/eclipse/eclipse.gradle'

repositories {
    // mavenLocal()
    mavenCentral()
}

if (project.hasProperty('enableJaCoCo')) {
    apply plugin: 'jacoco'
    jacoco { toolVersion = '0.8.5' }
}

sourceCompatibility = JavaVersion.VERSION_1_8
targetCompatibility = JavaVersion.VERSION_1_8

dependencies {
    implementation(
        'com.google.protobuf:protobuf-java:3.11.4',
        'com.google.code.gson:gson:2.8.6',
        'com.github.ofmooseandmen:halo:1.0.0'
    )
    testImplementation(
        'io.cucumber:cucumber-java:5.6.0',
        'io.cucumber:cucumber-picocontainer:5.6.0',
        'org.junit.jupiter:junit-jupiter-api:5.6.1',
        'org.awaitility:awaitility:4.0.2'
    )
}

protobuf {
    protoc {
        artifact = 'com.google.protobuf:protoc:3.11.4'
    }
}

// use cucumberTest instead
test {
    exclude '**'
}

task cucumberTest(type: JavaExec, dependsOn: [compileTestJava]) {
    group 'Verification'
    description 'Runs the cucumber tests.'

    outputs.upToDateWhen { false }

    classpath = sourceSets.test.runtimeClasspath

    main = 'io.cucumber.core.cli.Main'

    jvmArgs("-Djava.util.logging.config.file=${projectDir}/src/test/resources/logging.properties") 
    
    doFirst {
    
        def tags = System.getProperty("tags")
        systemProperty 'io.omam.wire.testkit.tags', tags
    
        args = [
            '--strict',
            '--glue', 'io.omam.wire',
            '--plugin', 'pretty',
            '--plugin', 'json:' + "${buildDir}" + '/reports/cucumberTests/wire-tests.json',
            '--tags', tags,
            "${projectDir}/src/test/resources/io/"
        ]
    }

}

if (project.hasProperty('enableJaCoCo')) {
    jacoco {
        applyTo cucumberTest
    }

    task jacocoCucumberTestReport(type: JacocoReport) {
        group 'Verification'
        description 'Generates code coverage report for the cucumberTest task.'

        outputs.upToDateWhen { false }
        
        classDirectories.from(sourceSets.main.output.classesDirs)
        sourceDirectories.from(sourceSets.main.java.srcDirs)

        executionData(files("${buildDir}/jacoco/cucumberTest.exec"))

        reports {
            html.enabled = true
            xml.enabled = true
        }
    }
}


if (Integer.valueOf(JavaVersion.current().getMajorVersion()) > 8) {
    // --release 8: configures the compiler to produce class files that will link against version 8
    compileJava.options.compilerArgs += ['--release', 8]
}

compileJava.options.encoding = 'UTF-8'
compileJava.options.compilerArgs += [
    '-Xlint:all',
    '-Werror'
]

jar {
    /* include source */
    from (sourceSets.main.allSource.getSrcDirTrees())
}

javadoc {
   /* exclude this public file generated by protobuf. */
   exclude '**/CastChannel.java'
   options.memberLevel = JavadocMemberLevel.PROTECTED
}

eclipse { 
    /* Modify the Eclipse project settings. */
    jdt { file { withProperties eclipsePrefs } } 

    classpath {
        /* add proto source to eclipse classpath & ignore optional problems in generated code. */
        file {
            whenMerged { classpath ->
                // FIXME if already present do not add again (cleanEclipse)
                def protoSrc = new SourceFolder('build/generated/source/proto/main/java', 'bin/main')
                protoSrc.entryAttributes['ignore_optional_problems'] = 'true'
                classpath.entries << protoSrc
            }
        }
    }
}

task copyEclipsePrefs(type: Copy) {
    from rootProject.file('gradle/eclipse-prefs/org.eclipse.jdt.ui.prefs')
    into "${projectDir}/.settings"
}
tasks.eclipse.finalizedBy copyEclipsePrefs

task sourcesJar(type: Jar) {
    from sourceSets.main.allSource
    classifier = 'sources'
}

task testSourcesJar(type: Jar) {
    from sourceSets.test.allSource
    classifier = 'test-sources'
}

task javadocJar(type: Jar) {
    from javadoc
    classifier = 'javadoc'
}

// Requirements:
//
// - Add the following properties to ~/.gradle/gradle.properties
//     ossrhUsername=<username>
//     ossrhPassword=<password>
// - Or pass the credentials as command line parameters
//     ./gradlew publishXXXX -PossrhUsername=<my-username> -PossrhPassword=<my-password>
//
publishing {
    publications {
        maven(MavenPublication) {
            from components.java
            artifact sourcesJar
            artifact testSourcesJar
            artifact javadocJar
            pom {
                name = project.name
                description = 'An implementation of the Google Cast V2 protocol in Java.'
                url = 'https://github.com/ofmooseandmen/wire'
                inceptionYear = '2018'
                licenses {
                    license {
                        name = 'The 3-Clause BSD License'
                        url = 'https://opensource.org/licenses/BSD-3-Clause'
                    }
                }
                developers {
                    developer {
                        id = 'ofmooseandmen'
                        name = 'Cedric Liegeois'
                        email = 'ofmooseandmen@yahoo.com'
                    }
                }
                scm {
                    connection = 'scm:https://ofmooseandmen@github.com/ofmooseandmen/wire.git'
                    developerConnection = 'scm:git://github.com/ofmooseandmen/wire.git'
                    url = 'https://github.com/ofmooseandmen/wire'
                }
            }
        }
    }

    repositories {
        mavenLocal()
        maven {
            def releasesRepoUrl = "https://oss.sonatype.org/service/local/staging/deploy/maven2/"
            def snapshotsRepoUrl = "https://oss.sonatype.org/content/repositories/snapshots/"
            def ossrhUsername = findProperty("ossrhUsername")
            def ossrhPassword = findProperty("ossrhPassword")
            url = version.endsWith('-SNAPSHOT') ? snapshotsRepoUrl : releasesRepoUrl
            credentials {
                username ossrhUsername
                password ossrhPassword
            }
        }
    }

}

// Requirements:
//
// - Get public key ID `gpg --list-keys --keyid-format SHORT`
// - Export key `gpg --keyring secring.gpg --export-secret-keys > ~/.gnupg/secring.gpg`
// - Add the following properties to ~/.gradle/gradle.properties
//      signing.keyId=0ABCDEF
//      signing.password=password
//      signing.secretKeyRingFile=/absolute/path/to/.gnupg/secring.gpg
//
def isSnapshot = project.version.toString().endsWith("-SNAPSHOT")
def isCiEnv = System.getenv("CI") ?: false
signing {
    required { !(isSnapshot || isCiEnv) }
    sign publishing.publications.maven
}