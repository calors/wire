apply from: 'resources/eclipse/eclipse.gradle'

allprojects {

    repositories {
        // mavenLocal()
        mavenCentral()
    }

    apply plugin: 'eclipse'

    if (project.hasProperty('enableJaCoCo')) {
        apply plugin: 'jacoco'
        jacoco { toolVersion = '0.8.5' }
    }

}

subprojects {

    apply plugin: 'java-library'
    apply plugin: 'maven-publish'
    apply plugin: 'signing'
    
    sourceCompatibility = JavaVersion.VERSION_1_8
    targetCompatibility = JavaVersion.VERSION_1_8
    
    if (Integer.valueOf(JavaVersion.current().getMajorVersion()) > 8) {
        // --release 8: configures the compiler to produce class files that will link against version 8
        compileJava.options.compilerArgs += ['--release', '8']
    }

    compileJava.options.encoding = 'UTF-8'
    compileJava.options.compilerArgs += [
        '-Xlint:all',
        '-Werror'
    ]
    
    jar {
        /* include source */
        from (sourceSets.main.allSource.getSrcDirTrees())
    }

    javadoc {
        /* exclude this public file generated by protobuf. */
        exclude '**/CastChannel.java'
        options.memberLevel = JavadocMemberLevel.PROTECTED
    }

    eclipse { 
        /* Modify the Eclipse project settings. */
        jdt { file { withProperties eclipsePrefs } } 
    }

    task copyEclipsePrefs(type: Copy) {
        from rootProject.file('resources/eclipse/org.eclipse.jdt.ui.prefs')
        into "${projectDir}/.settings"
    }
    tasks.eclipse.finalizedBy copyEclipsePrefs

    task sourcesJar(type: Jar) {
        from sourceSets.main.allSource
        classifier = 'sources'
    }

    task testSourcesJar(type: Jar) {
        from sourceSets.test.allSource
        classifier = 'test-sources'
    }

    task javadocJar(type: Jar) {
        from javadoc
        classifier = 'javadoc'
    }

	// Requirements:
	//
	// - Add the following properties to ~/.gradle/gradle.properties
	//     ossrhUsername=<username>
	//     ossrhPassword=<password>
	// - Or pass the credentials as command line parameters
	//     ./gradlew publishXXXX -PossrhUsername=<my-username> -PossrhPassword=<my-password>
	//
	publishing {
	    publications {
	        maven(MavenPublication) {
	            from components.java
	            artifact sourcesJar
	            artifact testSourcesJar
	            artifact javadocJar
	            pom {
	                name = "${project.group}:${project.name}"
	                description = 'An implementation of the Google Cast V2 protocol in Java.'
	                url = 'https://github.com/ofmooseandmen/wire'
	                inceptionYear = '2018'
	                licenses {
	                    license {
	                        name = 'The 3-Clause BSD License'
	                        url = 'https://opensource.org/licenses/BSD-3-Clause'
	                    }
	                }
	                developers {
	                    developer {
	                        id = 'ofmooseandmen'
	                        name = 'Cedric Liegeois'
	                        email = 'ofmooseandmen@yahoo.com'
	                    }
	                }
	                scm {
	                    connection = 'scm:https://ofmooseandmen@github.com/ofmooseandmen/wire.git'
	                    developerConnection = 'scm:git://github.com/ofmooseandmen/wire.git'
	                    url = 'https://github.com/ofmooseandmen/wire'
	                }
	            }
	        }
	    }
	
	    repositories {
	        mavenLocal()
	        maven {
	            def releasesRepoUrl = "https://oss.sonatype.org/service/local/staging/deploy/maven2/"
	            def snapshotsRepoUrl = "https://oss.sonatype.org/content/repositories/snapshots/"
	            def ossrhUsername = findProperty("ossrhUsername")
	            def ossrhPassword = findProperty("ossrhPassword")
	            url = version.endsWith('-SNAPSHOT') ? snapshotsRepoUrl : releasesRepoUrl
	            credentials {
	                username ossrhUsername
	                password ossrhPassword
	            }
	        }
	    }
	
	}
	
	// Requirements:
	//
	// - Get public key ID `gpg --list-keys --keyid-format SHORT`
	// - Export key `gpg --keyring secring.gpg --export-secret-keys > ~/.gnupg/secring.gpg`
	// - Add the following properties to ~/.gradle/gradle.properties
	//      signing.keyId=0ABCDEF
	//      signing.password=password
	//      signing.secretKeyRingFile=/absolute/path/to/.gnupg/secring.gpg
	//
	def isSnapshot = project.version.toString().endsWith("-SNAPSHOT")
	def isCiEnv = System.getenv("CI") ?: false
	signing {
	    required { !(isSnapshot || isCiEnv) }
	    sign publishing.publications.maven
	}

}
